{"version":3,"sources":["js/actions/actionTypes.tsx","js/misc/constants.tsx","js/misc/levels.tsx","js/reducers/index.tsx","js/misc/utils.tsx","js/components/Tile.tsx","js/components/Board.tsx","js/components/Header.tsx","js/components/InfoOverlay.tsx","js/components/Hint.tsx","js/components/Game.tsx","js/actions/index.tsx","App.js","serviceWorker.js","index.js"],"names":["UPDATE_CELLS","SET_ACTIVE_TYPE","RESTART_LEVEL","RESTART_GAME","SET_NEXT_LEVEL","BOARD_WIDTH","BOARD_HEIGHT","WALL_TYPE","TILE_TYPES","1","2","3","4","100","LEVELS","positionX","positionY","type","isFinishTile","hint","initializeState","level","cells","initializeCells","activeType","finishCords","setFinishCords","nonStandardTilesAmount","countTiles","setHint","score","singleScore","scoreClass","moves","isLevelFinished","levelsAmount","length","isGameFinished","newTile","currentLevel","uniqueKey","forEach","tile","tileFoundInNextCell","actionClass","push","coordinate","reduce","accumulator","currentValue","moveTile","move","state","cell","newPosition","availableCells","filter","toBeMergedWithFinish","cellsInGrid","grid","tilesNo","x","row","y","transformFromStateToGrid","cellsAmount","mergedCounter","alreadyMovedTile","traversals","pos","reverse","buildTraversals","moveVector","getMoveVector","finishCoordinates","prevCell","cellX","cellY","tileInCell","nextTile","withinBounds","findAvailablePosition","moveCell","factorial","n","console","log","updateScore","transformFromGridToState","prevPosition","setActiveType","rootReducer","action","payload","Tile","tileClassName","onMouseClick","useState","newTileClassName","setData","useEffect","requestAnimationFrame","className","onClick","Block","React","Component","Grid","i","j","blocks","key","connect","props","boardClassName","classNames","tiles","typeClass","positionClass","positionClassFinish","isTileActive","isTileFinish","toString","logoClass","singleScoreClassName","singleScoreValue","levelToShow","onLevelRestart","onGameRestart","onNextLevel","infoOverlayClass","infoOverlayWrapperClass","Game","handleKeyPress","event","KeyPressMap","updateCells","handleMouseClick","handleRestartLevel","restartLevel","handleRestartGame","restartGame","handleSetNextLevel","setNextLevel","document","addEventListener","this","dispatch","keyPressedNo","store","createStore","reducers","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.235e54c4.chunk.js","sourcesContent":["export const UPDATE_CELLS = \"UPDATE_CELLS\";\nexport const SET_ACTIVE_TYPE = \"SET_ACTIVE_TYPE\";\nexport const RESTART_LEVEL = \"RESTART_LEVEL\";\nexport const RESTART_GAME = \"RESTART_GAME\";\nexport const SET_NEXT_LEVEL = \"SET_NEXT_LEVEL\";\n","export const BOARD_WIDTH = 9;\nexport const BOARD_HEIGHT = 9;\nexport const WALL_TYPE = 100;\nexport const TILE_TYPES = {\n    1: 'primary',\n    2: 'secondary',\n    3: 'tertiary',\n    4: 'quaternary',\n    100: 'wall'\n};\n","import { WALL_TYPE } from \"../misc/constants\";\nexport const LEVELS = [\n    //level 0\n    [\n        {\n            positionX: 4,\n            positionY: 1,\n            type: 1,\n            isFinishTile: true,\n            hint: 'Use arrows or WASD to move the blue tile to the finish one.'\n        },\n        {\n            positionX: 4,\n            positionY: 6,\n            type: 1,\n            isFinishTile: false\n        }\n    ],\n    //level 1\n    [\n        {\n            positionX: 0,\n            positionY: 8,\n            type: 1,\n            isFinishTile: true,\n            hint: 'You will get maximum points if all of the blue tiles reach finish tile in the same move.'\n        },\n        {\n            positionX: 2,\n            positionY: 3,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 5,\n            positionY: 5,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 0,\n            positionY: 0,\n            type: 1,\n            isFinishTile: false\n        }\n    ],\n    //level 2\n    [\n        {\n            positionX: 8,\n            positionY: 0,\n            type: 1,\n            isFinishTile: true,\n            hint: 'Click on a different tile to change active color. Use inactive tiles as walls.'\n        },\n        {\n            positionX: 6,\n            positionY: 6,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 1,\n            positionY: 3,\n            type: 2,\n            isFinishTile: true\n        },\n        {\n            positionX: 4,\n            positionY: 7,\n            type: 2,\n            isFinishTile: false\n        }\n    ],\n    //level 3\n    [\n        {\n            positionX: 5,\n            positionY: 5,\n            type: 1,\n            isFinishTile: true,\n            hint: 'Use grey blocks as walls too.'\n        },\n        {\n            positionX: 0,\n            positionY: 0,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 4,\n            positionY: 2,\n            type: 2,\n            isFinishTile: true\n        },\n        {\n            positionX: 1,\n            positionY: 0,\n            type: 2,\n            isFinishTile: false\n        },\n        {\n            positionX: 6,\n            positionY: 6,\n            type: WALL_TYPE,\n            isFinishTile: false\n        },\n        {\n            positionX: 5,\n            positionY: 3,\n            type: WALL_TYPE,\n            isFinishTile: false\n        }\n    ],\n    //level 4\n    [\n        {\n            positionX: 8,\n            positionY: 3,\n            type: 1,\n            isFinishTile: true,\n            hint: 'Try with even more colors.'\n        },\n        {\n            positionX: 2,\n            positionY: 5,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 3,\n            positionY: 6,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 4,\n            positionY: 4,\n            type: 2,\n            isFinishTile: true\n        },\n        {\n            positionX: 1,\n            positionY: 0,\n            type: 2,\n            isFinishTile: false\n        },\n        {\n            positionX: 1,\n            positionY: 4,\n            type: 3,\n            isFinishTile: false\n        },\n        {\n            positionX: 6,\n            positionY: 8,\n            type: 3,\n            isFinishTile: true\n        }\n    ],\n    //level 5\n    [\n        {\n            positionX: 7,\n            positionY: 1,\n            type: 1,\n            isFinishTile: true,\n            hint: 'Good luck!'\n        },\n        {\n            positionX: 2,\n            positionY: 7,\n            type: 1,\n            isFinishTile: false\n        },\n        {\n            positionX: 1,\n            positionY: 7,\n            type: 2,\n            isFinishTile: true\n        },\n        {\n            positionX: 8,\n            positionY: 8,\n            type: 2,\n            isFinishTile: false\n        },\n        {\n            positionX: 2,\n            positionY: 2,\n            type: 3,\n            isFinishTile: true\n        },\n        {\n            positionX: 6,\n            positionY: 6,\n            type: 3,\n            isFinishTile: false\n        },\n        {\n            positionX: 5,\n            positionY: 5,\n            type: 4,\n            isFinishTile: true\n        },\n        {\n            positionX: 3,\n            positionY: 4,\n            type: 4,\n            isFinishTile: false\n        },\n        {\n            positionX: 8,\n            positionY: 0,\n            type: WALL_TYPE,\n            isFinishTile: false\n        }\n    ]\n];\n","import { UPDATE_CELLS, SET_ACTIVE_TYPE, RESTART_LEVEL, RESTART_GAME, SET_NEXT_LEVEL } from \"../actions/actionTypes\";\nimport { BOARD_WIDTH, BOARD_HEIGHT, WALL_TYPE } from \"../misc/constants\";\nimport { transformFromStateToGrid, transformFromGridToState, factorial } from \"../misc/utils\";\nimport { Cell, CellState, FinishCords, RootReducerAction } from \"../misc/tsTypes\";\nimport { LEVELS } from \"../misc/levels\";\n\nconst INITIAL_LEVEL = 0; //starts with 0\n\ninterface Vector {\n    x: number,\n    y: number\n}\n\ninterface Traversals {\n    x: number[],\n    y: number[]\n}\n\nfunction initializeState(level:number = 0): CellState {\n    return {\n        cells: initializeCells(level),\n        activeType: 1,\n        level: level,\n        finishCords: setFinishCords(level),\n        nonStandardTilesAmount: countTiles(level), //counter of nonstandard tiles, needed to calc if lvl is finished\n        hint: setHint(level),\n        score: 0,\n        singleScore: 0,\n        scoreClass: '',\n        moves: 0,\n        isLevelFinished: false,\n        levelsAmount: LEVELS.length,\n        isGameFinished: false\n    }\n};\n\n// Build a grid based on the current level, 0 by default\nfunction initializeCells(level:number = 0): Cell[] {\n    let cells = [],\n        newTile,\n        currentLevel = LEVELS[level],\n        uniqueKey = 0;\n\n    currentLevel.forEach(tile => {\n        newTile = {\n            ...tile,\n            uniqueKey: uniqueKey,\n            tileFoundInNextCell: false,\n            actionClass: ''\n        }\n        uniqueKey++;\n        cells.push(newTile)\n    });\n\n    return cells;\n};\n\nfunction setFinishCords(level:number = 0): Array<FinishCords> {\n    let finishCords = [],\n        currentLevel = LEVELS[level];\n\n    currentLevel.forEach(tile => {\n        if (tile.isFinishTile) {\n            let coordinate = {\n                positionX: tile.positionX,\n                positionY: tile.positionY,\n            }\n            finishCords.push(coordinate);\n        }\n    });\n\n    return finishCords;\n};\n\nfunction countTiles(level:number = 0): number {\n    let currentLevel = LEVELS[level];\n\n    let tilesAmount = currentLevel.reduce(function (accumulator, currentValue) {\n        if (currentValue.isFinishTile || currentValue.type === WALL_TYPE) {\n            return accumulator + 1;\n        } else {\n            return accumulator;\n        }\n    }, 0)\n\n    return tilesAmount;\n};\n\nfunction setHint(level:number = 0): string {\n    let hint = '',\n        currentLevel = LEVELS[level];\n\n    currentLevel.forEach(tile => {\n        if (tile.hint) {\n            hint = tile.hint\n            return;\n        }\n    });\n\n    return hint;\n};\n\nfunction moveTile(move: number, state: CellState): Cell[] {\n    let cell: Cell,\n        newPosition: Cell,\n        availableCells = removeMergedCells(state.cells),\n        cellsInGrid = transformFromStateToGrid(availableCells),\n        cellsAmount = availableCells.length - state.nonStandardTilesAmount,\n        mergedCounter: number = 0,\n        alreadyMovedTile: boolean = false;\n\n    const\n        traversals = buildTraversals(move),\n        moveVector = getMoveVector(move);\n\n    //remove 'merged' css class from the finish tiles\n    state.finishCords.forEach((finishCoordinates) => {\n        cellsInGrid[finishCoordinates.positionX][finishCoordinates.positionY].actionClass = '';\n    });\n\n    // Traverse the grid in the right direction and move tiles\n    traversals.x.forEach((x) => {\n        traversals.y.forEach((y) => {\n            cell = cellsInGrid[x][y];\n            if (cell && cell.type === state.activeType && !cell.isFinishTile) {\n                newPosition = findAvailablePosition(cell, cellsInGrid, moveVector);\n                if (newPosition.nextTile && ((newPosition.nextTile.isFinishTile && newPosition.nextTile.type === cell.type) || newPosition.nextTile.toBeMergedWithFinish)) {\n\n                    //add merge class to the finish tile\n                    if (newPosition.nextTile.isFinishTile && newPosition.nextTile.type === cell.type) {\n                        newPosition.nextTile.actionClass = 'merged';\n                    }\n\n                    //animate the movement with fading\n                    if (newPosition.toBeMergedWithFinish) {\n                        newPosition.actionClass = 'removed';\n                    }\n\n                    mergedCounter++;\n                    cellsAmount--;\n                    moveCell(cellsInGrid, newPosition, cell);\n                } else if (newPosition.positionX !== cell.positionX || newPosition.positionY !== cell.positionY) {\n                    moveCell(cellsInGrid, newPosition, cell);\n                }\n\n                if (!alreadyMovedTile) {\n                    state.moves++;\n                    alreadyMovedTile = true;\n                }\n            };\n        });\n    });\n\n    if (!mergedCounter) {\n        state.scoreClass = '';\n    } else {\n        updateScore(state, mergedCounter);\n    }\n\n    if (cellsAmount === 0) {\n        state.isLevelFinished = true;\n\n        if (state.level === state.levelsAmount - 1) {\n            state.isGameFinished = true;\n        }\n    }\n\n    return transformFromGridToState(cellsInGrid);\n};\n\nfunction updateScore(state: CellState, mergedCounter: number): void {\n    const singleScore = factorial(mergedCounter);\n    console.log(mergedCounter, singleScore)\n\n    state.singleScore = singleScore;\n    state.score += singleScore;\n    state.scoreClass = 'score-up';\n};\n\nfunction removeMergedCells(cells:Cell[]): Cell[] {\n    let filteredCells: Cell[];\n\n    filteredCells = cells.filter(cell => !cell.toBeMergedWithFinish)\n\n    return filteredCells;\n};\n\nfunction moveCell(cells:Cell[][], newPosition: Cell, prevPosition: Cell): Cell[][] {\n    cells[newPosition.positionX][newPosition.positionY] = newPosition;\n    cells[prevPosition.positionX][prevPosition.positionY] = null;\n\n    return cells;\n};\n\nfunction getMoveVector(move: number): Vector {\n    // Vectors representing tile movement\n    const map = {\n        1: { x: 0,  y: -1 }, // Up\n        2: { x: 1,  y: 0 },  // Right\n        3: { x: 0,  y: 1 },  // Down\n        4: { x: -1, y: 0 }   // Left\n    };\n\n    return map[move];\n};\n\n// strongly inspired by https://github.com/gabrielecirulli/2048/blob/ac03b1f01628038039b74b67f2e284b233bd143e/js/game_manager.js#L207\nfunction buildTraversals(move: number): Traversals {\n    let traversals = {\n        x: [],\n        y: []\n    };\n\n    for (let pos = 0; pos < BOARD_WIDTH; pos++) {\n        traversals.x.push(pos);\n        traversals.y.push(pos);\n    }\n\n    // Always traverse from the farthest cell in the chosen direction\n    // when moving right or down, reverse the natural order\n    if (move === 2) traversals.x = traversals.x.reverse();\n    if (move === 3) traversals.y = traversals.y.reverse();\n\n    return traversals;\n};\n\nfunction findAvailablePosition(cell: Cell, cells: Cell[][], moveVector: Vector): Cell {\n    let prevCell, tileFoundInNextCell, cellX, cellY, toBeMergedWithFinish;\n\n    // Progress towards the move direction until an obstacle is found\n    do {\n        prevCell = cell;\n        cellX = cell.positionX + moveVector.x;\n        cellY = cell.positionY + moveVector.y;\n        tileFoundInNextCell = tileInCell(cells, cellX, cellY);\n        toBeMergedWithFinish = (tileFoundInNextCell && ((tileFoundInNextCell.isFinishTile && tileFoundInNextCell.type === cell.type) || tileFoundInNextCell.toBeMergedWithFinish))\n        cell = {\n            positionX: cellX,\n            positionY: cellY,\n            type: cell.type,\n            isFinishTile: cell.isFinishTile,\n            uniqueKey: cell.uniqueKey,\n            actionClass: '',\n            nextTile: tileFoundInNextCell, //need nextTile to animate the position to equal finish\n            toBeMergedWithFinish: toBeMergedWithFinish\n        };\n    } while (withinBounds(cell) &&\n             !tileFoundInNextCell);\n\n    //even if not moving, I have to check if cell is going to be merged\n    prevCell.nextTile = tileFoundInNextCell;\n    prevCell.toBeMergedWithFinish = toBeMergedWithFinish;\n    return prevCell;\n};\n\nfunction withinBounds(cell: Cell): boolean {\n    return cell.positionX >= 0 && cell.positionX < BOARD_WIDTH &&\n         cell.positionY >= 0 && cell.positionY < BOARD_HEIGHT;\n};\n\n// returns content (tile) of a particular cell or null if tile not found\nfunction tileInCell(cells: Cell[][], cellX: number, cellY: number): Cell | null {\n    if (cells[cellX] && cells[cellX][cellY]) {\n        return cells[cellX][cellY];\n    } else {\n        return null;\n    }\n};\n\nfunction setActiveType(cell: Cell, activeType: number): number {\n    return cell.type !== WALL_TYPE ? cell.type : activeType;\n};\n\nconst rootReducer = (state = initializeState(INITIAL_LEVEL), action: RootReducerAction): CellState => {\n    let newState\n\n    switch (action.type) {\n        case UPDATE_CELLS:\n            newState = { ...state, cells: moveTile(action.payload, state) };\n            return newState;\n        case SET_ACTIVE_TYPE:\n            newState = { ...state, activeType: setActiveType(action.payload, state.activeType) };\n            return newState;\n        case RESTART_LEVEL:\n            newState = initializeState(state.level);\n            return newState;\n        case RESTART_GAME:\n            newState = initializeState(INITIAL_LEVEL);\n            return newState;\n        case SET_NEXT_LEVEL:\n            newState = initializeState(state.level + 1);\n            return newState;\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n","import { BOARD_WIDTH, BOARD_HEIGHT } from \"../misc/constants\";\nimport { Cell } from \"../misc/tsTypes\";\n\n/*\n  This method transforms the 1dim array of visible tiles into 2dim array of both visible and empty\n  tiles to easier calculate the collision and movement of the grid elements\n*/\nexport function transformFromStateToGrid(cells: Cell[]): Cell[][] {\n    let grid = [],\n        tile,\n        tilesNo = cells.length;\n\n    for (let x = 0; x < BOARD_WIDTH; x++) {\n        let row = grid[x] = [];\n\n        for (let y = 0; y < BOARD_HEIGHT; y++) {\n            row.push(null);\n        }\n    }\n\n    for (let x = 0; x < tilesNo; x++) {\n        tile = cells[x];\n        grid[tile.positionX][tile.positionY] = tile;\n    }\n\n    return grid;\n}\n\n/*\n  This method transforms the 2dim array of of both visible and empty\n  tiles into 1dim array of only visible tiles to store it as a state and properly show the movement in DOM\n*/\nexport function transformFromGridToState(grid: Cell[][]): Cell[] {\n    let cells = []\n\n    for (let x = 0; x < BOARD_WIDTH; x++) {\n        for (let y = 0; y < BOARD_HEIGHT; y++) {\n            if (grid[x][y]) {\n                cells.push(grid[x][y])\n            }\n        }\n    }\n\n    return cells;\n}\n\nexport function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial( n - 1 );\n    }\n}\n","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport { Cell } from \"../misc/tsTypes\";\n\ninterface Props {\n    tileClassName: string,\n    cell: Cell,\n    onMouseClick: (cell: Cell) => void\n}\n\nconst Tile: React.FunctionComponent<Props> = ({ tileClassName, cell, onMouseClick }) => {\n    const [newTileClassName, setData] = useState();\n\n    useEffect(() => {\n        requestAnimationFrame(() => {\n            setData(tileClassName);\n        })\n    }, [tileClassName]);\n\n    return (\n        <div className={newTileClassName} onClick={() => onMouseClick(cell)}/>\n    )\n}\n\nexport default Tile\n","import React, { FunctionComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport classNames from 'classnames';\nimport { BOARD_WIDTH, BOARD_HEIGHT, TILE_TYPES } from \"../misc/constants\";\nimport Tile from \"./Tile\";\nimport { Cell, FinishCords } from \"../misc/tsTypes\";\n\ninterface Props {\n    cells: Array<Cell>,\n    finishCords: FinishCords,\n    activeType: number,\n    onMouseClick: (cell: Cell) => void\n}\n\nconst mapStateToProps = state => {\n    return {\n        cells: state.cells,\n        finishCords: state.finishCords,\n        activeType: state.activeType\n    };\n};\n\nclass Block extends React.Component {\n    render() {\n        return (\n            <div className=\"block\"/>\n        );\n    }\n}\n\nclass Grid extends React.Component {\n    render() {\n        let i,\n            j,\n            uniqueKey = '',\n            blocks = [];\n\n        for (i = 0; i < BOARD_WIDTH; i++) {\n            for (j = 0; j < BOARD_HEIGHT; j++) {\n                uniqueKey = i + ' ' +j;\n                blocks.push(<Block key={uniqueKey}/>)\n            }\n        }\n\n        return (\n            <div className=\"grid\">\n                {blocks}\n            </div>\n        );\n    }\n}\n\nconst Board: React.FunctionComponent<Props> = (props) => {\n    const\n        cells = props.cells,\n        finishCords = props.finishCords[props.activeType - 1], //get only finish cords of active type, not the whole array\n        boardClassName = classNames('game', TILE_TYPES[props.activeType]);\n    let tiles = [];\n\n        cells.forEach((cell, i) => {\n            const\n                typeClass = \"tile-type-\" + TILE_TYPES[cell.type],\n                positionClass = \"tile-position-\" + cell.positionX + \"-\" + cell.positionY,\n                positionClassFinish = \"tile-position-\" + finishCords.positionX + \"-\" + finishCords.positionY,\n                actionClass = \"tile-action-\" + cell.actionClass,\n                isTileActive = props.activeType === cell.type,\n                isTileFinish = cell.isFinishTile,\n                tileClassName = classNames('tile', typeClass, {'tile-type-finish': isTileFinish}, cell.toBeMergedWithFinish ? positionClassFinish : positionClass, actionClass, {'tile-active': isTileActive}),\n                tile = <Tile tileClassName={tileClassName} cell={cell} onMouseClick={props.onMouseClick} key={cell.uniqueKey.toString()}/>\n\n            tiles.push(tile)\n        });\n\n    return (\n        <div className={boardClassName}>\n            <Grid/>\n            <div className=\"board\">\n                {tiles}\n            </div>\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(Board);\n","import React, { FunctionComponent } from 'react';\nimport { connect } from \"react-redux\";\nimport classNames from 'classnames';\nimport { TILE_TYPES } from \"../misc/constants\";\n\ninterface Props {\n    score: number,\n    singleScore: number,\n    level: number,\n    moves: number,\n    activeType: number,\n    scoreClass: string\n}\n\nconst mapStateToProps = state => {\n    return {\n        score: state.score,\n        singleScore: state.singleScore,\n        level: state.level,\n        moves: state.moves,\n        activeType: state.activeType,\n        scoreClass: state.scoreClass\n    };\n};\n\nconst Header: React.FunctionComponent<Props> = ({ score, singleScore, level, moves, activeType, scoreClass }) => {\n    const\n        logoClass = classNames('logo', 'logo-' + TILE_TYPES[activeType]),\n        singleScoreClassName = classNames('single-score', scoreClass),\n        singleScoreValue = '+' + singleScore,\n        levelToShow = level + 1;\n\n    return (\n        <div className='header'>\n            <h1 className={logoClass}>Swipers</h1>\n            <div className=\"score-wrapper\">\n                <div className=\"score-unit\">\n                    <p className=\"score-subheader score\">Level</p>\n                    <p className=\"score\">{levelToShow}</p>\n                </div>\n                <div className=\"score-unit\">\n                    <p className=\"score-subheader score\">Moves</p>\n                    <p className=\"score\">{moves}</p>\n                </div>\n                <div className=\"score-unit\">\n                    <p className=\"score-subheader score\">Score</p>\n                    <p className=\"score\">{score}</p>\n                    <span className={singleScoreClassName}>{singleScoreValue}</span>\n                </div>\n                <div className=\"score-unit\">\n                    <p className=\"score-subheader score\">Best</p>\n                    <p className=\"score\">{score}</p>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps)(Header);\n","import React, { FunctionComponent } from 'react';\nimport { connect } from \"react-redux\";\nimport classNames from 'classnames';\n\ninterface Props {\n    isLevelFinished: boolean,\n    isGameFinished: boolean,\n    moves: number,\n    onLevelRestart: () => void,\n    onGameRestart: () => void,\n    onNextLevel: () => void,\n};\n\nconst mapStateToProps = state => {\n    return {\n        isLevelFinished: state.isLevelFinished,\n        isGameFinished: state.isGameFinished,\n        moves: state.moves\n    };\n};\n\nconst InfoOverlay: React.FunctionComponent<Props> = ({ isLevelFinished, isGameFinished, moves, onLevelRestart, onGameRestart, onNextLevel }) => {\n    const\n        infoOverlayClass = classNames('info-overlay', { 'visible': isLevelFinished }),\n        infoOverlayWrapperClass = classNames('info-overlay-wrapper', { 'visible': isLevelFinished });\n\n    return (\n        <div>\n            <div className={infoOverlayWrapperClass}>\n            </div>\n            <div className={infoOverlayClass}>\n                <h1 className=\"title\">Congratulations!</h1>\n                <div className=\"text\">\n                    {isGameFinished\n                        ? <p>You finished the game :D</p>\n                        : <p>Level completed in just {moves} {moves > 1 ? 'moves' : 'move'} :)</p>\n                    }\n                </div>\n                <div>\n                    <button className=\"button restart\" onClick={onLevelRestart}>Restart level</button>\n                    {isGameFinished\n                        ? <button className=\"button next\" onClick={onGameRestart}>Restart game</button>\n                        : <button className=\"button next\" onClick={onNextLevel}>Next level</button>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default connect(mapStateToProps)(InfoOverlay);\n","import React, { FunctionComponent } from 'react';\nimport { connect } from \"react-redux\";\n\ninterface Props {\n    hint: string,\n    onLevelRestart: () => void,\n    onGameRestart: () => void,\n}\n\nconst mapStateToProps = state => {\n    return {\n        hint: state.hint\n    };\n};\n\nconst Hint: React.FunctionComponent<Props> = ({ hint, onLevelRestart, onGameRestart }) => {\n    return (\n        <div className='hint'>\n            <p>{hint}</p>\n            <div className='buttons'>\n                <button className=\"button restart\" onClick={onGameRestart}>Restart game</button>\n                <button className=\"button next\" onClick={onLevelRestart}>Restart level</button>\n            </div>\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps)(Hint);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport Board from \"./Board\"\nimport Header from \"./Header\"\nimport InfoOverlay from \"./InfoOverlay\"\nimport Hint from \"./Hint\"\nimport { updateCells, setActiveType, restartLevel, restartGame, setNextLevel } from \"../actions/index\";\nimport { Cell } from \"../misc/tsTypes\";\n\ninterface GameProps {\n    updateCells: typeof updateCells,\n    setActiveType: typeof setActiveType,\n    restartLevel: typeof restartLevel,\n    restartGame: typeof restartGame,\n    setNextLevel: typeof setNextLevel\n}\n\ninterface KeyboardEvent {\n    key: string\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateCells: keyPressedNo => dispatch(updateCells(keyPressedNo)),\n        setActiveType: cell => dispatch(setActiveType(cell)),\n        restartLevel: () => dispatch(restartLevel()),\n        restartGame: () => dispatch(restartGame()),\n        setNextLevel: () => dispatch(setNextLevel())\n    };\n};\n\nclass Game extends React.Component<GameProps> {\n    componentDidMount() {\n        document.addEventListener(\"keydown\", (event) => {\n            this.handleKeyPress(event)\n        });\n    }\n\n    handleKeyPress = (event: KeyboardEvent): void => {\n        const KeyPressMap = {\n            'ArrowUp': 1,\n            'ArrowRight': 2,\n            'ArrowDown': 3,\n            'ArrowLeft': 4,\n            'w': 1, // W\n            'd': 2, // D\n            's': 3, // S\n            'a': 4  // A\n        };\n\n        if (KeyPressMap[event.key]) {\n            this.props.updateCells(KeyPressMap[event.key]);\n        }\n    }\n\n    handleMouseClick = (cell: Cell): void => {\n        this.props.setActiveType(cell);\n    }\n\n    handleRestartLevel = (): void => {\n        this.props.restartLevel();\n    }\n\n    handleRestartGame = (): void => {\n        this.props.restartGame();\n    }\n\n    handleSetNextLevel = (): void => {\n        this.props.setNextLevel();\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Header/>\n                <Board onMouseClick={this.handleMouseClick}/>\n                <Hint onLevelRestart={this.handleRestartLevel} onGameRestart={this.handleRestartGame}/>\n                <InfoOverlay onLevelRestart={this.handleRestartLevel} onGameRestart={this.handleRestartGame} onNextLevel={this.handleSetNextLevel}/>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Game);\n","import { UPDATE_CELLS, SET_ACTIVE_TYPE, RESTART_LEVEL, RESTART_GAME, SET_NEXT_LEVEL } from \"./actionTypes\";\nimport { Cell, UpdateCellsAction, SetActiveTypeAction, RestartLevelAction, RestartGameAction, SetNextLevelAction } from \"../misc/tsTypes\";\n\nexport function updateCells(keyPressedNo: number): UpdateCellsAction {\n    return {\n        type: UPDATE_CELLS,\n        payload: keyPressedNo\n    }\n};\n\nexport function setActiveType(clickedTile: Cell): SetActiveTypeAction {\n    return {\n        type: SET_ACTIVE_TYPE,\n        payload: clickedTile\n    }\n};\n\nexport function restartLevel(): RestartLevelAction {\n    return {\n        type: RESTART_LEVEL\n    }\n};\n\nexport function restartGame(): RestartGameAction {\n    return {\n        type: RESTART_GAME\n    }\n};\n\nexport function setNextLevel(): SetNextLevelAction {\n    return {\n        type: SET_NEXT_LEVEL\n    }\n};\n","import React from \"react\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport reducers from \"./js/reducers\";\nimport Game from \"./js/components/Game\";\n\nconst store = createStore(\n    reducers\n);\n\nfunction App() {\n    return (\n        <div>\n            <Provider store={store}>\n                <Game/>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}